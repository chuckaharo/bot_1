services:
  bot:
    build: 
      context: .
      dockerfile: Dockerfile
    env_file: 
      - .env
    restart: unless-stopped
    networks:
      - bot-network
    volumes:
      - ./logs:/app/logs                # Монтирование логов
      - ./src:/app/src                   # Монтирование исходников
      - ./data:/app/data                 # Для постоянного хранения файлов
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bot.rule=Host(`ваш-домен.com`)"
      - "traefik.http.routers.bot.entrypoints=websecure"
      - "traefik.http.routers.bot.tls.certresolver=letsencrypt"

  postgres:
    image: postgres:15-alpine
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U botuser -d botdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: 
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"

  redis:
    image: redis:7-alpine
    command: 
      - redis-server 
      - "--maxmemory 512mb"
      - "--maxmemory-policy allkeys-lru"
    volumes:
      - redis_data:/data
    networks:
      - bot-network

  traefik:
    image: traefik:v2.6
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme.json:/acme.json    # Для SSL-сертификатов
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
    networks:
      - bot-network
    environment:
      - "TRAEFIK_PROVIDERS_DOCKER=true"
      - "TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false"

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  data:
    driver: local

networks:
  bot-network:
    driver: bridge