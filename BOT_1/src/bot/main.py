import os
import logging
import asyncio  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç asyncio
from telegram import Update  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Update
from telegram.ext import Application
from src.bot.config import Config
from src.bot.database import init_db
from src.bot.handlers import register_handlers
from src.bot.logger import setup_logging
from src.bot.notifications import notify_critical_error

# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
# 1. main() —Å—Ç–∞–ª–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
# 2. –î–æ–±–∞–≤–ª–µ–Ω asyncio.run() –¥–ª—è –∑–∞–ø—É—Å–∫–∞
# 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ application –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
# 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Update

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    setup_logging()
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    application = None  # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–ª–æ–∫–µ except
    
    try:
        config = Config()
        logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        SessionFactory = init_db(config.database_url)
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder() \
            .token(config.bot_token) \
            .post_init(post_init) \
            .build()

        application.bot_data.update({
            "session_factory": SessionFactory,
            "config": config
        })

        register_handlers(application)
        logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
        await application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )

    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        if application and application.bot:
            # –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á—É
            asyncio.create_task(notify_critical_error(application.bot, str(e)))
        raise

async def post_init(app: Application) -> None:
    """–ü–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await app.bot.set_my_commands([
            ("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            ("products", "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"),
            ("help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É")
        ])
        logging.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        await app.bot.send_message(
            chat_id=Config().admin_ids[0],
            text="üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    asyncio.run(main())