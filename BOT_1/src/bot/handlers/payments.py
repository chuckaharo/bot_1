from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from src.bot.crypto import CryptoProcessor
from src.bot.database import Transaction, Product
from src.bot.config import Config
from src.bot.handlers.admin import admin_only
import logging

config = Config()
crypto = CryptoProcessor(config.blockcypher_api)
logger = logging.getLogger(__name__)

async def start_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        product_id = int(context.args[0])
        Session = context.bot_data['session']
        
        with Session() as session:
            product = session.query(Product).get(product_id)
            if not product or product.stock < 1:
                await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            wallet = crypto.generate_wallet('btc' if product.price_btc > 0 else 'ltc')
            currency = 'BTC' if product.price_btc > 0 else 'LTC'
            amount = product.price_btc if currency == 'BTC' else product.price_ltc

            transaction = Transaction(
                user_id=update.effective_user.id,
                product_id=product.id,
                crypto_address=wallet['address'],
                amount=amount,
                currency=currency,
                status='pending'
            )
            session.add(transaction)
            session.commit()

            keyboard = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_{transaction.id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message_text = (
                f"üí≥ –û–ø–ª–∞—Ç–∞ {product.name}\n\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
                f"üì• –ê–¥—Ä–µ—Å: {wallet['address']}\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"
            )

            await update.message.reply_text(message_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Payment error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def check_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    transaction_id = int(query.data.split('_')[1])
    Session = context.bot_data['session']
    
    try:
        with Session() as session:
            transaction = session.query(Transaction).get(transaction_id)
            if not transaction:
                await query.edit_message_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            if crypto.check_payment(transaction.crypto_address, transaction.currency.lower()):
                transaction.status = 'completed'
                product = session.query(Product).get(transaction.product_id)
                product.stock -= 1
                session.commit()
                
                await query.edit_message_text(
                    "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                    "üì¶ –í–∞—à —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
                )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_text = (
                    f"üõé –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{query.from_user.username}\n"
                    f"‚Ä¢ –¢–æ–≤–∞—Ä: {product.name}\n"
                    f"‚Ä¢ –°—É–º–º–∞: {transaction.amount} {transaction.currency}"
                )
                for admin_id in config.admin_ids:
                    await context.bot.send_message(admin_id, admin_text)
            else:
                await query.edit_message_text("‚åõÔ∏è –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ")

    except Exception as e:
        logger.error(f"Payment check error: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

@admin_only
async def refund_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        transaction_id = int(context.args[0])
        Session = context.bot_data['session']
        
        with Session() as session:
            transaction = session.query(Transaction).get(transaction_id)
            if transaction and transaction.status == 'completed':
                transaction.status = 'refunded'
                session.commit()
                await update.message.reply_text("‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞")

    except Exception as e:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /refund <ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏>")

def register_payment_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π"""
    application.add_handler(CommandHandler("pay", start_payment))
    application.add_handler(CallbackQueryHandler(check_payment_callback, pattern="^check_"))
    application.add_handler(CommandHandler("refund", refund_transaction))