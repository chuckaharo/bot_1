from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from sqlalchemy.orm import Session
from src.bot.database import Product
from src.bot.config import Config
from src.bot.logger import log_command, log_error, log_admin_action

config = Config()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = update.effective_user.id
        log_command(user_id, "/start")
        
        await update.message.reply_text(
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot!*\n\n"
            "üõçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /products –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "üí≥ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ /pay_[ID]",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        user_id = update.effective_user.id
        log_command(user_id, "/help")
        
        help_text = (
            "üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/products - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/my_orders - –í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
            "/support - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        )
        await update.message.reply_text(help_text, parse_mode="Markdown")
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help: {str(e)}")

async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /products"""
    session = None
    try:
        user_id = update.effective_user.id
        log_command(user_id, "/products")
        
        Session = context.bot_data['session_factory']
        session = Session()
        
        products = session.query(Product).filter(Product.stock > 0).all()
        
        if not products:
            await update.message.reply_text("üòî –¢–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        response = ["üõí *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n"]
        for product in products:
            response.append(
                f"‚ñ™Ô∏è *{product.name}*\n"
                f"   –¶–µ–Ω–∞: `{product.price_btc:.8f} ‚Çø` / `{product.price_ltc:.8f} ≈Å`\n"
                f"   –û—Å—Ç–∞—Ç–æ–∫: {product.stock} —à—Ç.\n"
                f"   –ö—É–ø–∏—Ç—å: /pay_{product.id}"
            )
            
        await update.message.reply_text("\n".join(response), parse_mode="Markdown")
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /products: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        if session:
            session.close()

async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_orders"""
    session = None
    try:
        user_id = update.effective_user.id
        log_command(user_id, "/my_orders")
        
        Session = context.bot_data['session_factory']
        session = Session()
        
        orders = session.query(Transaction)\
            .filter(Transaction.user_id == user_id)\
            .order_by(Transaction.created_at.desc())\
            .limit(5)\
            .all()
            
        if not orders:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            return
            
        response = ["üìã *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\n"]
        for order in orders:
            status_emoji = "‚úÖ" if order.status == "completed" else "üïí"
            response.append(
                f"{status_emoji} –ó–∞–∫–∞–∑ #{order.id}\n"
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {order.status.capitalize()}\n"
            )
            
        await update.message.reply_text("\n".join(response), parse_mode="Markdown")
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_orders: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤")
    finally:
        if session:
            session.close()

def register_commands(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("products", list_products))
    application.add_handler(CommandHandler("my_orders", my_orders))