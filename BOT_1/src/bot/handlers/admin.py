from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from sqlalchemy.orm import Session
from src.bot.database import Product, Transaction
from src.bot.config import Config
from src.bot.notifications import notify_admins
from src.bot.logger import log_admin_action, log_error

config = Config()

def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in config.admin_ids:
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        return await func(update, context)
    return wrapper

@admin_only
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        keyboard = [
            [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂", callback_data="admin_stats")],
            [InlineKeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        log_admin_action(update.effective_user.id, "–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
    except Exception as e:
        log_error(f"Admin panel error: {str(e)}")
        await notify_admins(context.bot, f"–û—à–∏–±–∫–∞ –ø–∞–Ω–µ–ª–∏: {str(e)}")

async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "admin_products":
            await query.edit_message_text(
                "üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/add_product - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
                "/update_stock - –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
                "/products - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤",
                parse_mode="Markdown"
            )
        elif query.data == "admin_stats":
            await show_stats(update, context)
        elif query.data == "admin_orders":
            await show_recent_orders(update, context)
            
    except Exception as e:
        log_error(f"Admin button handler error: {str(e)}")

@admin_only
async def show_recent_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã"""
    session = None
    try:
        Session = context.bot_data['session_factory']
        session = Session()
        
        orders = session.query(Transaction)\
            .order_by(Transaction.created_at.desc())\
            .limit(10)\
            .all()
            
        if not orders:
            await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
            return
            
        response = ["üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤:*\n"]
        for order in orders:
            response.append(
                f"#{order.id} {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {order.status} | –°—É–º–º–∞: {order.amount} {order.currency}"
            )
            
        await update.message.reply_text("\n".join(response), parse_mode="Markdown")
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")
        log_error(f"Order history error: {str(e)}")
    finally:
        if session:
            session.close()

@admin_only
async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    session = None
    try:
        args = context.args
        if len(args) != 5:
            raise ValueError("‚ùå –§–æ—Ä–º–∞—Ç: /add_product <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞ BTC> <—Ü–µ–Ω–∞ LTC> <file_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        
        Session = context.bot_data['session_factory']
        session = Session()
        
        name = args[0]
        price_btc = float(args[1])
        price_ltc = float(args[2])
        file_id = args[3]
        stock = int(args[4])
        
        product = Product(
            name=name,
            price_btc=price_btc,
            price_ltc=price_ltc,
            file_id=file_id,
            stock=stock
        )
        session.add(product)
        session.commit()
        await update.message.reply_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
        log_admin_action(update.effective_user.id, f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name}")
        
    except ValueError as e:
        await update.message.reply_text(str(e))
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        log_error(f"Add product error: {str(e)}")
    finally:
        if session:
            session.close()

@admin_only
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂"""
    session = None
    try:
        Session = context.bot_data['session_factory']
        session = Session()
        
        total_products = session.query(Product).count()
        total_sales = session.query(Transaction).filter_by(status="completed").count()
        pending_orders = session.query(Transaction).filter_by(status="pending").count()
        
        stats_text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂*\n\n"
            f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: `{total_products}`\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: `{total_sales}`\n"
            f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã: `{pending_orders}`"
        )
        await update.message.reply_text(stats_text, parse_mode="Markdown")
        log_admin_action(update.effective_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        log_error(f"Stats error: {str(e)}")
    finally:
        if session:
            session.close()

@admin_only
async def update_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    session = None
    try:
        args = context.args
        if len(args) != 2:
            raise ValueError("‚ùå –§–æ—Ä–º–∞—Ç: /update_stock <ID —Ç–æ–≤–∞—Ä–∞> <–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
            
        product_id = int(args[0])
        new_stock = int(args[1])
        
        Session = context.bot_data['session_factory']
        session = Session()
        
        product = session.query(Product).get(product_id)
        if product:
            product.stock = new_stock
            session.commit()
            await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä ID {product_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
            log_admin_action(update.effective_user.id, f"–û–±–Ω–æ–≤–ª–µ–Ω stock —Ç–æ–≤–∞—Ä–∞ #{product_id}")
        else:
            await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError as e:
        await update.message.reply_text(str(e))
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        log_error(f"Update stock error: {str(e)}")
    finally:
        if session:
            session.close()

def register_admin_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CallbackQueryHandler(admin_button_handler, pattern="^admin_"))
    application.add_handler(CommandHandler("add_product", add_product))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("update_stock", update_stock))